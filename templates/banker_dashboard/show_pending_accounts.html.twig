{% extends 'base.html.twig' %}

{% block title %}Bank'in - Comptes en attente de validation{% endblock %}

{% block javascripts %}
    <script
            src="https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.x.x/dist/alpine.min.js"
            defer
    ></script>
    <script>
        /**
         * Limit focus to focusable elements inside `element`
         * @param {HTMLElement} element - DOM element to focus trap inside
         * @return {Function} cleanup function
         */
        function focusTrap(element) {
            const focusableElements = getFocusableElements(element)
            const firstFocusableEl = focusableElements[0]
            const lastFocusableEl = focusableElements[focusableElements.length - 1]

            // Wait for the case the element was not yet rendered
            setTimeout(() => firstFocusableEl.focus(), 50)

            /**
             * Get all focusable elements inside `element`
             * @param {HTMLElement} element - DOM element to focus trap inside
             * @return {HTMLElement[]} List of focusable elements
             */
            function getFocusableElements(element = document) {
                return [
                    ...element.querySelectorAll(
                        'a, button, details, input, select, textarea, [tabindex]:not([tabindex="-1"])'
                    ),
                ].filter((e) => !e.hasAttribute('disabled'))
            }

            function handleKeyDown(e) {
                const TAB = 9
                const isTab = e.key.toLowerCase() === 'tab' || e.keyCode === TAB

                if (!isTab) return

                if (e.shiftKey) {
                    if (document.activeElement === firstFocusableEl) {
                        lastFocusableEl.focus()
                        e.preventDefault()
                    }
                } else {
                    if (document.activeElement === lastFocusableEl) {
                        firstFocusableEl.focus()
                        e.preventDefault()
                    }
                }
            }

            element.addEventListener('keydown', handleKeyDown)

            return function cleanup() {
                element.removeEventListener('keydown', handleKeyDown)
            }
        }
    </script>
    <script>
        function data() {
            function getThemeFromLocalStorage() {
                // if user already changed the theme, use it
                if (window.localStorage.getItem('dark')) {
                    return JSON.parse(window.localStorage.getItem('dark'))
                }

                // else return their preferences
                return (
                    !!window.matchMedia &&
                    window.matchMedia('(prefers-color-scheme: dark)').matches
                )
            }

            function setThemeToLocalStorage(value) {
                window.localStorage.setItem('dark', value)
            }

            return {
                dark: getThemeFromLocalStorage(),
                toggleTheme() {
                    this.dark = !this.dark
                    setThemeToLocalStorage(this.dark)
                },
                isSideMenuOpen: false,
                toggleSideMenu() {
                    this.isSideMenuOpen = !this.isSideMenuOpen
                },
                closeSideMenu() {
                    this.isSideMenuOpen = false
                },
                isNotificationsMenuOpen: false,
                toggleNotificationsMenu() {
                    this.isNotificationsMenuOpen = !this.isNotificationsMenuOpen
                },
                closeNotificationsMenu() {
                    this.isNotificationsMenuOpen = false
                },
                isProfileMenuOpen: false,
                toggleProfileMenu() {
                    this.isProfileMenuOpen = !this.isProfileMenuOpen
                },
                closeProfileMenu() {
                    this.isProfileMenuOpen = false
                },
                isPagesMenuOpen: false,
                togglePagesMenu() {
                    this.isPagesMenuOpen = !this.isPagesMenuOpen
                },
                // Modal
                isModalOpen: false,
                trapCleanup: null,
                openModal() {
                    this.isModalOpen = true
                    this.trapCleanup = focusTrap(document.querySelector('#modal'))
                },
                closeModal() {
                    this.isModalOpen = false
                    this.trapCleanup()
                },
            }
        }
    </script>
{% endblock %}

{% block body %}
    <div
            class="flex h-screen bg-gray-50 dark:bg-gray-900"
            :class="{ 'overflow-hidden': isSideMenuOpen }"
    >
        {{ include('banker_dashboard/_sidebard.html.twig') }}
        <div
                x-show="isSideMenuOpen"
                x-transition:enter="transition ease-in-out duration-150"
                x-transition:enter-start="opacity-0"
                x-transition:enter-end="opacity-100"
                x-transition:leave="transition ease-in-out duration-150"
                x-transition:leave-start="opacity-100"
                x-transition:leave-end="opacity-0"
                class="fixed inset-0 z-10 flex items-end bg-black bg-opacity-50 sm:items-center sm:justify-center"
        ></div>
        {{ include('banker_dashboard/_mobile_sidebard.html.twig') }}
        <div class="flex flex-col flex-1 w-full">
            {{ include('banker_dashboard/_header.html.twig') }}
            <main class="h-full overflow-y-auto">
                <div class="container px-6 mx-auto grid">
                    <h2
                            class="my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200"
                    >
                        Comptes en attente de validation
                    </h2>
                    <p class="p-1 text-gray-700">Cet espace vous permet de valider les comptes qui sont en attente de validation et qui vous ont été attribués.</p>

                    <!-- New Table -->
                    <div class="w-full overflow-hidden rounded-lg shadow-xs mt-4">
                        <div class="w-full overflow-x-auto">
                            <table class="w-full whitespace-no-wrap">
                                <thead>
                                <tr
                                        class="text-xs font-semibold tracking-wide text-left text-gray-500 uppercase border-b dark:border-gray-700 bg-gray-50 dark:text-gray-400 dark:bg-gray-800"
                                >
                                    <th class="px-4 py-3">Client</th>
                                    <th class="px-4 py-3">Adresse</th>
                                    <th class="px-4 py-3">Date de naissance</th>
                                    <th class="px-4 py-3">Carte d'identité</th>
                                    <th class="px-4 py-3">Action</th>
                                </tr>
                                </thead>
                                <tbody
                                        class="bg-white divide-y dark:divide-gray-700 dark:bg-gray-800"
                                >

                                {% for key, client in pendingAccounts %}

                                <tr class="text-gray-700 dark:text-gray-400">
                                    <td class="py-3">
                                        <div class="flex items-center text-sm">
                                            <!-- Avatar with inset shadow -->
                                            <div
                                                    class="relative hidden w-8 h-8 rounded-full md:block"
                                            >
                                            </div>
                                            <div>
                                                <p class="font-semibold">{{ client.name}} {{ client.firstname }}</p>
                                                <p class="text-xs text-gray-600 dark:text-gray-400">
                                                    {{ client.email }}
                                                </p>
                                            </div>
                                        </div>
                                    </td>
                                    <td class="px-4 py-3 text-sm">
                                        {{ client.address}}, {{ client.zipcode }}
                                    </td>
                                    <td class="px-4 py-3 text-xs">
                        <span
                                class="px-2 py-1 text-sm"
                        >
                          {{ client.birthdate|date("d/m/Y") }}
                        </span>
                                    </td>
                                    <td class="px-4 py-3 text-sm">
                                        <a target="_blank" href="https://ecf-bank.s3.eu-west-3.amazonaws.com/{{ client.idCardName }}" class="relative bg-blue-500 text-white p-1 rounded text-sm font-bold overflow-hidden">
                                            Voir
                                        </a>
                                    </td>
                                    <td class="px-4 py-3 text-sm">
                                        {{ form_start(forms[key], {'action': path('banker_pending_accounts')}) }}
                                        {{ form_widget(forms[key].clientId, {'value': client.id}) }}
                                        {{ form_widget(forms[key].save, {'attr': {'class': 'relative bg-green-500 text-white p-1 rounded text-sm font-bold overflow-hidden'}}) }}

                                        {{ form_end(forms[key]) }}
                                    </td>
                                </tr>

                                {% endfor %}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>
{% endblock %}
